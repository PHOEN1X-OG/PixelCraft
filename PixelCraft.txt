{
  "metadata": {
    "name": "PixelCraft - Image Processing tool",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div>\n  <h1>PixelCraft</h1>\n\n<div id=\"content\">\n  <div>\n\t<button id=\"editimg\">Start Editing</button>\n    \n  </div>\n</div>\n\n</div>",
      "status": "",
      "output": "<div>\n  <h1>PixelCraft</h1>\n\n<div id=\"content\">\n    <div>\n      <label for=\"fileInput\">Upload the Image:</label>\n      <input type=\"file\" id=\"fileInput\" accept=\"image/*\">\n    </div>\n    <div id=\"mediaPreview\"><canvas width=\"220\" height=\"308\"></canvas></div>\n    <div id=\"editoptions\">\n          <div class=\"slider-container\">\n            <label for=\"brightness\">Brightness:</label>\n            <input type=\"range\" id=\"brightness\" class=\"slider\" min=\"0\" max=\"200\" value=\"100\">\n          </div>\n\t\t  <div class=\"slider-container\">\n            <label for=\"brightness\">Exposure:</label>\n            <input type=\"range\" id=\"exposure\" class=\"slider\" min=\"0\" max=\"200\" value=\"100\">\n          </div>\n          <div class=\"slider-container\">\n            <label for=\"contrast\">Contrast:</label>\n            <input type=\"range\" id=\"contrast\" class=\"slider\" min=\"0\" max=\"200\" value=\"100\">\n          </div>\n\t\t  <div class=\"slider-container\">\n            <label for=\"brightness\">Saturation:</label>\n            <input type=\"range\" id=\"saturation\" class=\"slider\" min=\"0\" max=\"200\" value=\"100\">\n          </div>\n\t\t  <div class=\"slider-container\">\n            <label for=\"brightness\">Sharpness:</label>\n            <input type=\"range\" id=\"sharpness\" class=\"slider\" min=\"0\" max=\"200\" value=\"100\">\n          </div>\n\t\t  <button id=\"upscaleBtn\">Upscale Image</button>\n          <button id=\"downloadBtn\">Download Processed Media</button>\n\t\t  <div>Please Reload the page to edit a new Image</div>\n        </div>\n  </div>\n\n</div>",
      "type": "html"
    },
    {
      "code": "\n//Loading Tensorflow.js and Upscaler.js for Image Upscaling\nasync function loadScripts() {\nawait scrib.loadScript(\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js\");\nawait scrib.loadScript(\"https://cdn.jsdelivr.net/npm/@upscalerjs/default-model@latest/dist/umd/index.min.js\");\nawait scrib.loadScript(\"https://cdn.jsdelivr.net/npm/upscaler@latest/dist/browser/umd/upscaler.min.js\");\n}",
      "status": "[1]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "let img, canvas, ctx;",
      "status": "[2]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "\n\nconst content = document.getElementById('content');\nconst editimg = document.getElementById('editimg');\n\neditimg.addEventListener('click', () => {\n  content.innerHTML = `\n    <div>\n      <label for=\"fileInput\">Upload the Image:</label>\n      <input type=\"file\" id=\"fileInput\" accept=\"image/*\">\n    </div>\n    <div id=\"mediaPreview\"></div>\n    <div id=\"editoptions\"></div>\n  `;\n  showpreview();\n});\n\n\n//Function to enable Download option after every change\nfunction enabledownload() {\n  const downloadBtn = document.getElementById('downloadBtn');\n  if (downloadBtn) {\n    downloadBtn.addEventListener('click', function() {\n      if (canvas) {\n        const link = document.createElement('a');\n        link.href = canvas.toDataURL();\n        link.download = 'processed_image.png';\n        link.click();\n        console.log(\"download link created\");\n      }\n    });\n  }\n}\n\n//Convlution filter function to handle sharpness\nfunction applyConvolutionFilter(data, width, height, kernel) {\n  const tempData = new Uint8ClampedArray(data);\n  const half = Math.floor(Math.sqrt(kernel.length) / 2);\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      let r = 0, g = 0, b = 0;\n\n      for (let ky = -half; ky <= half; ky++) {\n        for (let kx = -half; kx <= half; kx++) {\n          const xk = x + kx;\n          const yk = y + ky;\n\n          if (xk >= 0 && xk < width && yk >= 0 && yk < height) {\n            const idx = (yk * width + xk) * 4;\n            const kVal = kernel[(ky + half) * 3 + (kx + half)];\n\n            r += data[idx] * kVal;\n            g += data[idx + 1] * kVal;\n            b += data[idx + 2] * kVal;\n          }\n        }\n      }\n\n      const i = (y * width + x) * 4;\n      tempData[i] = r;\n      tempData[i + 1] = g;\n      tempData[i + 2] = b;\n    }\n  }\n\n  data.set(tempData);\n}\n\n\n//Function to apply the changes to the image\nfunction applyFilters() {\n  const brightness = document.getElementById('brightness').value;\n  const contrast = document.getElementById('contrast').value;\n  const exposure = document.getElementById('exposure').value;\n  const saturation = document.getElementById('saturation').value;\n  const sharpness = document.getElementById('sharpness').value;\n  \n  //console.log('Brightness:', brightness, 'Contrast:', contrast);\n\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  const data = imageData.data;\n\n  //Brightness, Contrast, Exposure and Saturation operate between 0 and 2. Sharpness operates between -1 and 1;\n  const brightnessFactor = brightness / 100;\n  const contrastFactor = contrast / 100;\n  const exposureFactor = exposure / 100;\n  const saturationFactor = saturation  / 100;\n  const sharpnessFactor = (sharpness - 100) / 100;\n\n  for (let i = 0; i < data.length; i += 4) {\n    data[i] = data[i] * brightnessFactor;\n    data[i + 1] = data[i + 1] * brightnessFactor;\n    data[i + 2] = data[i + 2] * brightnessFactor;\n\n    data[i] = ((data[i] - 128) * contrastFactor) + 128;\n    data[i + 1] = ((data[i + 1] - 128) * contrastFactor) + 128;\n    data[i + 2] = ((data[i + 2] - 128) * contrastFactor) + 128;\n\t\n\tdata[i] = data[i] * exposureFactor;\n    data[i + 1] = data[i + 1] * exposureFactor;\n    data[i + 2] = data[i + 2] * exposureFactor;\n\t\n\tconst avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n    data[i] = avg + (data[i] - avg) * saturationFactor;\n    data[i + 1] = avg + (data[i + 1] - avg) * saturationFactor;\n    data[i + 2] = avg + (data[i + 2] - avg) * saturationFactor;\n  }\n\n  if (sharpnessFactor !== 1) {\n    const kernel = [\n      0, -sharpnessFactor, 0,\n      -sharpnessFactor, 1 + 4 * sharpnessFactor, -sharpnessFactor,\n      0, -sharpnessFactor, 0\n    ];\n    applyConvolutionFilter(data, canvas.width, canvas.height, kernel);\n  }\n  \n  ctx.putImageData(imageData, 0, 0);\n\n  enabledownload();\n}\n\nfunction showpreview() {\n  const fileInput = document.getElementById('fileInput');\n  const mediaPreview = document.getElementById('mediaPreview');\n  const editoptions = document.getElementById('editoptions');\n\n  fileInput.addEventListener('change', function() {\n    const file = this.files[0];\n    const url = URL.createObjectURL(file);\n\n    if (file.type.startsWith('image/')) {\n      img = new Image();\n      img.src = url;\n\n      img.onload = () => {\n        canvas = document.createElement('canvas');\n        ctx = canvas.getContext('2d');\n        canvas.width = img.width;\n        canvas.height = img.height;\n\n        console.log(`Canvas width: ${canvas.width}, height: ${canvas.height}`);\n\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        mediaPreview.innerHTML = ''; \n        mediaPreview.appendChild(canvas);\n\n        editoptions.innerHTML = `\n          <div class=\"slider-container\">\n            <label for=\"brightness\">Brightness:</label>\n            <input type=\"range\" id=\"brightness\" class=\"slider\" min=\"0\" max=\"200\" value=\"100\">\n          </div>\n\t\t  <div class=\"slider-container\">\n            <label for=\"brightness\">Exposure:</label>\n            <input type=\"range\" id=\"exposure\" class=\"slider\" min=\"0\" max=\"200\" value=\"100\">\n          </div>\n          <div class=\"slider-container\">\n            <label for=\"contrast\">Contrast:</label>\n            <input type=\"range\" id=\"contrast\" class=\"slider\" min=\"0\" max=\"200\" value=\"100\">\n          </div>\n\t\t  <div class=\"slider-container\">\n            <label for=\"brightness\">Saturation:</label>\n            <input type=\"range\" id=\"saturation\" class=\"slider\" min=\"0\" max=\"200\" value=\"100\">\n          </div>\n\t\t  <div class=\"slider-container\">\n            <label for=\"brightness\">Sharpness:</label>\n            <input type=\"range\" id=\"sharpness\" class=\"slider\" min=\"0\" max=\"200\" value=\"100\">\n          </div>\n\t\t  <button id=\"upscaleBtn\">Upscale Image</button>\n          <button id=\"downloadBtn\">Download Processed Media</button>\n\t\t  <div>Please Reload the page to edit a new Image</div>\n        `;\n\n       //Attaching Event listeners to the Controls\t\t\n\t\t\n        document.getElementById('brightness').addEventListener('input', applyFilters);\n        document.getElementById('contrast').addEventListener('input', applyFilters);\n\t\tdocument.getElementById('exposure').addEventListener('input', applyFilters);\n\t\tdocument.getElementById('sharpness').addEventListener('input', applyFilters);\n\t\tdocument.getElementById('saturation').addEventListener('input', applyFilters);\n\t\tdocument.getElementById('upscaleBtn').addEventListener('click', async () => {\n           await aiUpscale();\n        });\n\n        applyFilters();\n\t  };\n\n      img.onerror = () => {\n        mediaPreview.innerHTML = `<p>Failed to load image. Please try a different file.</p>`;\n        console.error(\"Image failed to load.\");\n      };\n\n    } else {\n      mediaPreview.innerHTML = `<p>Unsupported media type.</p>`;\n    }\n  });\n}",
      "status": "[3]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "\n// Function to perform AI upscaling using upscaler.js\nasync function aiUpscale() {\n    await loadScripts();\n  \n//console.log('Upscaling image...');\n  \n  const upscaler = new Upscaler({\n    model: DefaultUpscalerJSModel,\n  })\n  \n  // Converting canvas to image URL\n  const imageURL = canvas.toDataURL();\n  \n  // Creating an Image object\n  const img = new Image();\n  img.src = imageURL;\n\n  \n  await new Promise((resolve) => {\n    img.onload = resolve;\n  });\n\n //Passing Upscaling command\n  const upscaledImageDataURL = await upscaler.upscale(img, { scale: 2 });\n  const upscaledImage = new Image();\n  upscaledImage.src = upscaledImageDataURL;\n  \n\n  // Clearing canvas and drawing the upscaled image\n  upscaledImage.onload = () => {\n\t\n\tcanvas.width = upscaledImage.width;\n\tcanvas.height = upscaledImage.height;\n\t\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.drawImage(upscaledImage, 0, 0, canvas.width, canvas.height );\n  };\n  \n  enabledownload();\n\n //console.log('Image upscaled successfully!');\n}",
      "status": "[4]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}